// Generated from SyslLexer.g4 by ANTLR 4.7.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

import "strings"

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 66, 517,
	8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5,
	9, 5, 4, 6, 9, 6, 4, 7, 9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4,
	11, 9, 11, 4, 12, 9, 12, 4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16,
	9, 16, 4, 17, 9, 17, 4, 18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9,
	21, 4, 22, 9, 22, 4, 23, 9, 23, 4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26,
	4, 27, 9, 27, 4, 28, 9, 28, 4, 29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4,
	32, 9, 32, 4, 33, 9, 33, 4, 34, 9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37,
	9, 37, 4, 38, 9, 38, 4, 39, 9, 39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9,
	42, 4, 43, 9, 43, 4, 44, 9, 44, 4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47,
	4, 48, 9, 48, 4, 49, 9, 49, 4, 50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4,
	53, 9, 53, 4, 54, 9, 54, 4, 55, 9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58,
	9, 58, 4, 59, 9, 59, 4, 60, 9, 60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9,
	63, 4, 64, 9, 64, 4, 65, 9, 65, 4, 66, 9, 66, 3, 2, 3, 2, 3, 2, 3, 2, 3,
	2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
	2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
	2, 3, 2, 3, 2, 3, 2, 5, 2, 170, 10, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 3, 193, 10, 3, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 6, 3, 6, 3, 6, 3, 6, 3,
	6, 3, 6, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 8, 3,
	8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 5, 8, 235,
	10, 8, 3, 8, 3, 8, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 10, 3, 10, 3, 10, 3,
	10, 3, 10, 3, 10, 3, 10, 3, 10, 5, 10, 252, 10, 10, 3, 11, 3, 11, 3, 11,
	3, 11, 3, 11, 3, 11, 5, 11, 260, 10, 11, 3, 11, 3, 11, 3, 12, 3, 12, 3,
	12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 5, 12, 272, 10, 12, 3, 13, 3, 13,
	3, 13, 3, 13, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 15, 3,
	15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16,
	3, 16, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 18, 3, 18, 3, 18, 3, 19, 3,
	19, 3, 19, 3, 19, 3, 19, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20,
	3, 20, 3, 20, 3, 20, 3, 21, 3, 21, 3, 22, 3, 22, 3, 23, 3, 23, 3, 24, 3,
	24, 3, 25, 3, 25, 3, 26, 3, 26, 3, 27, 3, 27, 3, 28, 3, 28, 3, 29, 3, 29,
	3, 30, 3, 30, 3, 31, 3, 31, 3, 32, 3, 32, 3, 33, 3, 33, 3, 34, 3, 34, 3,
	34, 3, 34, 3, 35, 3, 35, 3, 36, 3, 36, 3, 36, 3, 37, 3, 37, 3, 37, 3, 38,
	3, 38, 3, 39, 3, 39, 3, 40, 3, 40, 3, 41, 3, 41, 3, 42, 3, 42, 3, 43, 3,
	43, 3, 44, 3, 44, 3, 44, 3, 44, 3, 45, 3, 45, 3, 45, 3, 45, 3, 46, 3, 46,
	3, 47, 3, 47, 3, 48, 6, 48, 384, 10, 48, 13, 48, 14, 48, 385, 3, 48, 3,
	48, 3, 48, 3, 49, 6, 49, 392, 10, 49, 13, 49, 14, 49, 393, 3, 49, 3, 49,
	6, 49, 398, 10, 49, 13, 49, 14, 49, 399, 3, 49, 3, 49, 3, 49, 3, 50, 3,
	50, 7, 50, 407, 10, 50, 12, 50, 14, 50, 410, 11, 50, 3, 51, 6, 51, 413,
	10, 51, 13, 51, 14, 51, 414, 3, 52, 6, 52, 418, 10, 52, 13, 52, 14, 52,
	419, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 5, 53, 430,
	10, 53, 3, 53, 3, 53, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 55, 3, 55,
	3, 55, 3, 55, 3, 55, 3, 56, 6, 56, 445, 10, 56, 13, 56, 14, 56, 446, 3,
	57, 3, 57, 3, 57, 6, 57, 452, 10, 57, 13, 57, 14, 57, 453, 3, 57, 3, 57,
	3, 57, 3, 58, 3, 58, 7, 58, 461, 10, 58, 12, 58, 14, 58, 464, 11, 58, 3,
	59, 6, 59, 467, 10, 59, 13, 59, 14, 59, 468, 3, 59, 3, 59, 3, 59, 3, 59,
	3, 60, 6, 60, 476, 10, 60, 13, 60, 14, 60, 477, 3, 60, 3, 60, 3, 61, 3,
	61, 3, 61, 3, 61, 3, 62, 3, 62, 6, 62, 488, 10, 62, 13, 62, 14, 62, 489,
	3, 62, 3, 62, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 64, 3, 64, 7, 64, 501,
	10, 64, 12, 64, 14, 64, 504, 11, 64, 3, 65, 3, 65, 3, 65, 3, 65, 3, 66,
	3, 66, 6, 66, 512, 10, 66, 13, 66, 14, 66, 513, 3, 66, 3, 66, 3, 399, 2,
	67, 7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11, 21, 12, 23, 13, 25,
	14, 27, 15, 29, 16, 31, 17, 33, 18, 35, 19, 37, 20, 39, 21, 41, 22, 43,
	23, 45, 24, 47, 25, 49, 26, 51, 27, 53, 28, 55, 29, 57, 30, 59, 31, 61,
	32, 63, 33, 65, 34, 67, 35, 69, 36, 71, 37, 73, 38, 75, 39, 77, 40, 79,
	41, 81, 42, 83, 43, 85, 44, 87, 45, 89, 46, 91, 47, 93, 48, 95, 49, 97,
	50, 99, 51, 101, 52, 103, 53, 105, 2, 107, 2, 109, 54, 111, 55, 113, 56,
	115, 2, 117, 57, 119, 58, 121, 59, 123, 60, 125, 61, 127, 62, 129, 63,
	131, 64, 133, 65, 135, 66, 7, 2, 3, 4, 5, 6, 20, 4, 2, 75, 75, 107, 107,
	4, 2, 72, 72, 104, 104, 4, 2, 81, 81, 113, 113, 3, 2, 36, 36, 3, 2, 41,
	41, 4, 2, 11, 11, 34, 34, 4, 2, 12, 12, 15, 15, 3, 2, 12, 12, 3, 2, 51,
	59, 3, 2, 50, 59, 5, 2, 12, 12, 15, 15, 36, 36, 5, 2, 12, 12, 15, 15, 41,
	41, 13, 2, 12, 12, 15, 15, 34, 37, 41, 41, 49, 49, 60, 60, 62, 62, 64,
	64, 66, 66, 93, 95, 126, 126, 4, 2, 67, 92, 99, 124, 7, 2, 47, 47, 50,
	59, 67, 92, 97, 97, 99, 124, 3, 2, 34, 34, 8, 2, 12, 12, 15, 15, 60, 60,
	62, 62, 93, 93, 95, 95, 7, 2, 12, 12, 15, 15, 60, 60, 93, 93, 95, 95, 2,
	537, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2, 13, 3, 2,
	2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2, 2, 19, 3, 2, 2, 2, 2, 21, 3,
	2, 2, 2, 2, 23, 3, 2, 2, 2, 2, 25, 3, 2, 2, 2, 2, 27, 3, 2, 2, 2, 2, 29,
	3, 2, 2, 2, 2, 31, 3, 2, 2, 2, 2, 33, 3, 2, 2, 2, 2, 35, 3, 2, 2, 2, 2,
	37, 3, 2, 2, 2, 2, 39, 3, 2, 2, 2, 2, 41, 3, 2, 2, 2, 2, 43, 3, 2, 2, 2,
	2, 45, 3, 2, 2, 2, 2, 47, 3, 2, 2, 2, 2, 49, 3, 2, 2, 2, 2, 51, 3, 2, 2,
	2, 2, 53, 3, 2, 2, 2, 2, 55, 3, 2, 2, 2, 2, 57, 3, 2, 2, 2, 2, 59, 3, 2,
	2, 2, 2, 61, 3, 2, 2, 2, 2, 63, 3, 2, 2, 2, 2, 65, 3, 2, 2, 2, 2, 67, 3,
	2, 2, 2, 2, 69, 3, 2, 2, 2, 2, 71, 3, 2, 2, 2, 2, 73, 3, 2, 2, 2, 2, 75,
	3, 2, 2, 2, 2, 77, 3, 2, 2, 2, 2, 79, 3, 2, 2, 2, 2, 81, 3, 2, 2, 2, 2,
	83, 3, 2, 2, 2, 2, 85, 3, 2, 2, 2, 2, 87, 3, 2, 2, 2, 2, 89, 3, 2, 2, 2,
	2, 91, 3, 2, 2, 2, 2, 93, 3, 2, 2, 2, 2, 95, 3, 2, 2, 2, 2, 97, 3, 2, 2,
	2, 2, 99, 3, 2, 2, 2, 2, 101, 3, 2, 2, 2, 2, 103, 3, 2, 2, 2, 2, 109, 3,
	2, 2, 2, 2, 111, 3, 2, 2, 2, 2, 113, 3, 2, 2, 2, 2, 117, 3, 2, 2, 2, 2,
	119, 3, 2, 2, 2, 2, 121, 3, 2, 2, 2, 3, 123, 3, 2, 2, 2, 4, 125, 3, 2,
	2, 2, 4, 127, 3, 2, 2, 2, 5, 129, 3, 2, 2, 2, 5, 131, 3, 2, 2, 2, 6, 133,
	3, 2, 2, 2, 6, 135, 3, 2, 2, 2, 7, 169, 3, 2, 2, 2, 9, 192, 3, 2, 2, 2,
	11, 194, 3, 2, 2, 2, 13, 200, 3, 2, 2, 2, 15, 207, 3, 2, 2, 2, 17, 213,
	3, 2, 2, 2, 19, 234, 3, 2, 2, 2, 21, 238, 3, 2, 2, 2, 23, 251, 3, 2, 2,
	2, 25, 259, 3, 2, 2, 2, 27, 271, 3, 2, 2, 2, 29, 273, 3, 2, 2, 2, 31, 277,
	3, 2, 2, 2, 33, 284, 3, 2, 2, 2, 35, 291, 3, 2, 2, 2, 37, 297, 3, 2, 2,
	2, 39, 302, 3, 2, 2, 2, 41, 305, 3, 2, 2, 2, 43, 310, 3, 2, 2, 2, 45, 320,
	3, 2, 2, 2, 47, 322, 3, 2, 2, 2, 49, 324, 3, 2, 2, 2, 51, 326, 3, 2, 2,
	2, 53, 328, 3, 2, 2, 2, 55, 330, 3, 2, 2, 2, 57, 332, 3, 2, 2, 2, 59, 334,
	3, 2, 2, 2, 61, 336, 3, 2, 2, 2, 63, 338, 3, 2, 2, 2, 65, 340, 3, 2, 2,
	2, 67, 342, 3, 2, 2, 2, 69, 344, 3, 2, 2, 2, 71, 346, 3, 2, 2, 2, 73, 350,
	3, 2, 2, 2, 75, 352, 3, 2, 2, 2, 77, 355, 3, 2, 2, 2, 79, 358, 3, 2, 2,
	2, 81, 360, 3, 2, 2, 2, 83, 362, 3, 2, 2, 2, 85, 364, 3, 2, 2, 2, 87, 366,
	3, 2, 2, 2, 89, 368, 3, 2, 2, 2, 91, 370, 3, 2, 2, 2, 93, 374, 3, 2, 2,
	2, 95, 378, 3, 2, 2, 2, 97, 380, 3, 2, 2, 2, 99, 383, 3, 2, 2, 2, 101,
	391, 3, 2, 2, 2, 103, 404, 3, 2, 2, 2, 105, 412, 3, 2, 2, 2, 107, 417,
	3, 2, 2, 2, 109, 429, 3, 2, 2, 2, 111, 433, 3, 2, 2, 2, 113, 438, 3, 2,
	2, 2, 115, 444, 3, 2, 2, 2, 117, 448, 3, 2, 2, 2, 119, 458, 3, 2, 2, 2,
	121, 466, 3, 2, 2, 2, 123, 475, 3, 2, 2, 2, 125, 481, 3, 2, 2, 2, 127,
	485, 3, 2, 2, 2, 129, 493, 3, 2, 2, 2, 131, 498, 3, 2, 2, 2, 133, 505,
	3, 2, 2, 2, 135, 509, 3, 2, 2, 2, 137, 138, 7, 107, 2, 2, 138, 139, 7,
	112, 2, 2, 139, 170, 7, 118, 2, 2, 140, 141, 7, 117, 2, 2, 141, 142, 7,
	118, 2, 2, 142, 143, 7, 116, 2, 2, 143, 144, 7, 107, 2, 2, 144, 145, 7,
	112, 2, 2, 145, 170, 7, 105, 2, 2, 146, 147, 7, 102, 2, 2, 147, 148, 7,
	99, 2, 2, 148, 149, 7, 118, 2, 2, 149, 170, 7, 103, 2, 2, 150, 151, 7,
	100, 2, 2, 151, 152, 7, 113, 2, 2, 152, 153, 7, 113, 2, 2, 153, 170, 7,
	110, 2, 2, 154, 155, 7, 102, 2, 2, 155, 156, 7, 103, 2, 2, 156, 157, 7,
	101, 2, 2, 157, 158, 7, 107, 2, 2, 158, 159, 7, 111, 2, 2, 159, 160, 7,
	99, 2, 2, 160, 170, 7, 110, 2, 2, 161, 162, 7, 102, 2, 2, 162, 163, 7,
	99, 2, 2, 163, 164, 7, 118, 2, 2, 164, 165, 7, 103, 2, 2, 165, 166, 7,
	118, 2, 2, 166, 167, 7, 107, 2, 2, 167, 168, 7, 111, 2, 2, 168, 170, 7,
	103, 2, 2, 169, 137, 3, 2, 2, 2, 169, 140, 3, 2, 2, 2, 169, 146, 3, 2,
	2, 2, 169, 150, 3, 2, 2, 2, 169, 154, 3, 2, 2, 2, 169, 161, 3, 2, 2, 2,
	170, 8, 3, 2, 2, 2, 171, 172, 7, 73, 2, 2, 172, 173, 7, 71, 2, 2, 173,
	193, 7, 86, 2, 2, 174, 175, 7, 82, 2, 2, 175, 176, 7, 81, 2, 2, 176, 177,
	7, 85, 2, 2, 177, 193, 7, 86, 2, 2, 178, 179, 7, 70, 2, 2, 179, 180, 7,
	71, 2, 2, 180, 181, 7, 78, 2, 2, 181, 182, 7, 71, 2, 2, 182, 183, 7, 86,
	2, 2, 183, 193, 7, 71, 2, 2, 184, 185, 7, 82, 2, 2, 185, 186, 7, 87, 2,
	2, 186, 193, 7, 86, 2, 2, 187, 188, 7, 82, 2, 2, 188, 189, 7, 67, 2, 2,
	189, 190, 7, 86, 2, 2, 190, 191, 7, 69, 2, 2, 191, 193, 7, 74, 2, 2, 192,
	171, 3, 2, 2, 2, 192, 174, 3, 2, 2, 2, 192, 178, 3, 2, 2, 2, 192, 184,
	3, 2, 2, 2, 192, 187, 3, 2, 2, 2, 193, 10, 3, 2, 2, 2, 194, 195, 7, 35,
	2, 2, 195, 196, 7, 121, 2, 2, 196, 197, 7, 116, 2, 2, 197, 198, 7, 99,
	2, 2, 198, 199, 7, 114, 2, 2, 199, 12, 3, 2, 2, 2, 200, 201, 7, 35, 2,
	2, 201, 202, 7, 118, 2, 2, 202, 203, 7, 99, 2, 2, 203, 204, 7, 100, 2,
	2, 204, 205, 7, 110, 2, 2, 205, 206, 7, 103, 2, 2, 206, 14, 3, 2, 2, 2,
	207, 208, 7, 35, 2, 2, 208, 209, 7, 118, 2, 2, 209, 210, 7, 123, 2, 2,
	210, 211, 7, 114, 2, 2, 211, 212, 7, 103, 2, 2, 212, 16, 3, 2, 2, 2, 213,
	214, 7, 107, 2, 2, 214, 215, 7, 111, 2, 2, 215, 216, 7, 114, 2, 2, 216,
	217, 7, 113, 2, 2, 217, 218, 7, 116, 2, 2, 218, 219, 7, 118, 2, 2, 219,
	220, 3, 2, 2, 2, 220, 221, 8, 7, 2, 2, 221, 18, 3, 2, 2, 2, 222, 223, 7,
	116, 2, 2, 223, 224, 7, 103, 2, 2, 224, 225, 7, 118, 2, 2, 225, 226, 7,
	119, 2, 2, 226, 227, 7, 116, 2, 2, 227, 235, 7, 112, 2, 2, 228, 229, 7,
	84, 2, 2, 229, 230, 7, 71, 2, 2, 230, 231, 7, 86, 2, 2, 231, 232, 7, 87,
	2, 2, 232, 233, 7, 84, 2, 2, 233, 235, 7, 80, 2, 2, 234, 222, 3, 2, 2,
	2, 234, 228, 3, 2, 2, 2, 235, 236, 3, 2, 2, 2, 236, 237, 8, 8, 2, 2, 237,
	20, 3, 2, 2, 2, 238, 239, 9, 2, 2, 2, 239, 240, 9, 3, 2, 2, 240, 241, 3,
	2, 2, 2, 241, 242, 8, 9, 3, 2, 242, 22, 3, 2, 2, 2, 243, 244, 7, 103, 2,
	2, 244, 245, 7, 110, 2, 2, 245, 246, 7, 117, 2, 2, 246, 252, 7, 103, 2,
	2, 247, 248, 7, 71, 2, 2, 248, 249, 7, 110, 2, 2, 249, 250, 7, 117, 2,
	2, 250, 252, 7, 103, 2, 2, 251, 243, 3, 2, 2, 2, 251, 247, 3, 2, 2, 2,
	252, 24, 3, 2, 2, 2, 253, 254, 7, 72, 2, 2, 254, 255, 7, 113, 2, 2, 255,
	260, 7, 116, 2, 2, 256, 257, 7, 104, 2, 2, 257, 258, 7, 113, 2, 2, 258,
	260, 7, 116, 2, 2, 259, 253, 3, 2, 2, 2, 259, 256, 3, 2, 2, 2, 260, 261,
	3, 2, 2, 2, 261, 262, 8, 11, 3, 2, 262, 26, 3, 2, 2, 2, 263, 264, 7, 78,
	2, 2, 264, 265, 7, 113, 2, 2, 265, 266, 7, 113, 2, 2, 266, 272, 7, 114,
	2, 2, 267, 268, 7, 110, 2, 2, 268, 269, 7, 113, 2, 2, 269, 270, 7, 113,
	2, 2, 270, 272, 7, 114, 2, 2, 271, 263, 3, 2, 2, 2, 271, 267, 3, 2, 2,
	2, 272, 28, 3, 2, 2, 2, 273, 274, 7, 48, 2, 2, 274, 275, 7, 48, 2, 2, 275,
	276, 7, 48, 2, 2, 276, 30, 3, 2, 2, 2, 277, 278, 7, 117, 2, 2, 278, 279,
	7, 103, 2, 2, 279, 280, 7, 118, 2, 2, 280, 281, 7, 34, 2, 2, 281, 282,
	7, 113, 2, 2, 282, 283, 7, 104, 2, 2, 283, 32, 3, 2, 2, 2, 284, 285, 9,
	4, 2, 2, 285, 286, 7, 112, 2, 2, 286, 287, 7, 103, 2, 2, 287, 288, 7, 34,
	2, 2, 288, 289, 7, 113, 2, 2, 289, 290, 7, 104, 2, 2, 290, 34, 3, 2, 2,
	2, 291, 292, 7, 62, 2, 2, 292, 293, 7, 47, 2, 2, 293, 294, 7, 64, 2, 2,
	294, 295, 3, 2, 2, 2, 295, 296, 8, 16, 4, 2, 296, 36, 3, 2, 2, 2, 297,
	298, 7, 60, 2, 2, 298, 299, 7, 60, 2, 2, 299, 300, 3, 2, 2, 2, 300, 301,
	8, 17, 3, 2, 301, 38, 3, 2, 2, 2, 302, 303, 7, 62, 2, 2, 303, 304, 7, 60,
	2, 2, 304, 40, 3, 2, 2, 2, 305, 306, 7, 62, 2, 2, 306, 307, 7, 47, 2, 2,
	307, 308, 3, 2, 2, 2, 308, 309, 8, 19, 3, 2, 309, 42, 3, 2, 2, 2, 310,
	311, 7, 48, 2, 2, 311, 312, 7, 48, 2, 2, 312, 313, 7, 34, 2, 2, 313, 314,
	7, 44, 2, 2, 314, 315, 7, 34, 2, 2, 315, 316, 7, 62, 2, 2, 316, 317, 7,
	47, 2, 2, 317, 318, 7, 34, 2, 2, 318, 319, 7, 44, 2, 2, 319, 44, 3, 2,
	2, 2, 320, 321, 7, 45, 2, 2, 321, 46, 3, 2, 2, 2, 322, 323, 7, 128, 2,
	2, 323, 48, 3, 2, 2, 2, 324, 325, 7, 46, 2, 2, 325, 50, 3, 2, 2, 2, 326,
	327, 7, 63, 2, 2, 327, 52, 3, 2, 2, 2, 328, 329, 7, 38, 2, 2, 329, 54,
	3, 2, 2, 2, 330, 331, 7, 49, 2, 2, 331, 56, 3, 2, 2, 2, 332, 333, 7, 47,
	2, 2, 333, 58, 3, 2, 2, 2, 334, 335, 7, 44, 2, 2, 335, 60, 3, 2, 2, 2,
	336, 337, 7, 60, 2, 2, 337, 62, 3, 2, 2, 2, 338, 339, 7, 39, 2, 2, 339,
	64, 3, 2, 2, 2, 340, 341, 7, 48, 2, 2, 341, 66, 3, 2, 2, 2, 342, 343, 7,
	35, 2, 2, 343, 68, 3, 2, 2, 2, 344, 345, 7, 65, 2, 2, 345, 70, 3, 2, 2,
	2, 346, 347, 7, 66, 2, 2, 347, 348, 3, 2, 2, 2, 348, 349, 8, 34, 5, 2,
	349, 72, 3, 2, 2, 2, 350, 351, 7, 40, 2, 2, 351, 74, 3, 2, 2, 2, 352, 353,
	7, 93, 2, 2, 353, 354, 8, 36, 6, 2, 354, 76, 3, 2, 2, 2, 355, 356, 7, 95,
	2, 2, 356, 357, 8, 37, 7, 2, 357, 78, 3, 2, 2, 2, 358, 359, 7, 125, 2,
	2, 359, 80, 3, 2, 2, 2, 360, 361, 7, 127, 2, 2, 361, 82, 3, 2, 2, 2, 362,
	363, 7, 42, 2, 2, 363, 84, 3, 2, 2, 2, 364, 365, 7, 43, 2, 2, 365, 86,
	3, 2, 2, 2, 366, 367, 7, 62, 2, 2, 367, 88, 3, 2, 2, 2, 368, 369, 7, 64,
	2, 2, 369, 90, 3, 2, 2, 2, 370, 371, 7, 37, 2, 2, 371, 372, 3, 2, 2, 2,
	372, 373, 8, 44, 2, 2, 373, 92, 3, 2, 2, 2, 374, 375, 7, 126, 2, 2, 375,
	376, 3, 2, 2, 2, 376, 377, 8, 45, 2, 2, 377, 94, 3, 2, 2, 2, 378, 379,
	9, 5, 2, 2, 379, 96, 3, 2, 2, 2, 380, 381, 9, 6, 2, 2, 381, 98, 3, 2, 2,
	2, 382, 384, 9, 7, 2, 2, 383, 382, 3, 2, 2, 2, 384, 385, 3, 2, 2, 2, 385,
	383, 3, 2, 2, 2, 385, 386, 3, 2, 2, 2, 386, 387, 3, 2, 2, 2, 387, 388,
	9, 8, 2, 2, 388, 389, 8, 48, 8, 2, 389, 100, 3, 2, 2, 2, 390, 392, 9, 7,
	2, 2, 391, 390, 3, 2, 2, 2, 392, 393, 3, 2, 2, 2, 393, 391, 3, 2, 2, 2,
	393, 394, 3, 2, 2, 2, 394, 395, 3, 2, 2, 2, 395, 397, 7, 37, 2, 2, 396,
	398, 10, 9, 2, 2, 397, 396, 3, 2, 2, 2, 398, 399, 3, 2, 2, 2, 399, 400,
	3, 2, 2, 2, 399, 397, 3, 2, 2, 2, 400, 401, 3, 2, 2, 2, 401, 402, 7, 12,
	2, 2, 402, 403, 8, 49, 9, 2, 403, 102, 3, 2, 2, 2, 404, 408, 9, 10, 2,
	2, 405, 407, 9, 11, 2, 2, 406, 405, 3, 2, 2, 2, 407, 410, 3, 2, 2, 2, 408,
	406, 3, 2, 2, 2, 408, 409, 3, 2, 2, 2, 409, 104, 3, 2, 2, 2, 410, 408,
	3, 2, 2, 2, 411, 413, 10, 12, 2, 2, 412, 411, 3, 2, 2, 2, 413, 414, 3,
	2, 2, 2, 414, 412, 3, 2, 2, 2, 414, 415, 3, 2, 2, 2, 415, 106, 3, 2, 2,
	2, 416, 418, 10, 13, 2, 2, 417, 416, 3, 2, 2, 2, 418, 419, 3, 2, 2, 2,
	419, 417, 3, 2, 2, 2, 419, 420, 3, 2, 2, 2, 420, 108, 3, 2, 2, 2, 421,
	422, 5, 95, 46, 2, 422, 423, 5, 105, 51, 2, 423, 424, 5, 95, 46, 2, 424,
	430, 3, 2, 2, 2, 425, 426, 5, 97, 47, 2, 426, 427, 5, 107, 52, 2, 427,
	428, 5, 97, 47, 2, 428, 430, 3, 2, 2, 2, 429, 421, 3, 2, 2, 2, 429, 425,
	3, 2, 2, 2, 430, 431, 3, 2, 2, 2, 431, 432, 8, 53, 10, 2, 432, 110, 3,
	2, 2, 2, 433, 434, 9, 8, 2, 2, 434, 435, 8, 54, 11, 2, 435, 436, 3, 2,
	2, 2, 436, 437, 8, 54, 12, 2, 437, 112, 3, 2, 2, 2, 438, 439, 5, 91, 44,
	2, 439, 440, 5, 123, 60, 2, 440, 441, 3, 2, 2, 2, 441, 442, 8, 55, 12,
	2, 442, 114, 3, 2, 2, 2, 443, 445, 10, 14, 2, 2, 444, 443, 3, 2, 2, 2,
	445, 446, 3, 2, 2, 2, 446, 444, 3, 2, 2, 2, 446, 447, 3, 2, 2, 2, 447,
	116, 3, 2, 2, 2, 448, 451, 5, 115, 56, 2, 449, 450, 7, 34, 2, 2, 450, 452,
	5, 115, 56, 2, 451, 449, 3, 2, 2, 2, 452, 453, 3, 2, 2, 2, 453, 451, 3,
	2, 2, 2, 453, 454, 3, 2, 2, 2, 454, 455, 3, 2, 2, 2, 455, 456, 6, 57, 2,
	2, 456, 457, 6, 57, 3, 2, 457, 118, 3, 2, 2, 2, 458, 462, 9, 15, 2, 2,
	459, 461, 9, 16, 2, 2, 460, 459, 3, 2, 2, 2, 461, 464, 3, 2, 2, 2, 462,
	460, 3, 2, 2, 2, 462, 463, 3, 2, 2, 2, 463, 120, 3, 2, 2, 2, 464, 462,
	3, 2, 2, 2, 465, 467, 9, 7, 2, 2, 466, 465, 3, 2, 2, 2, 467, 468, 3, 2,
	2, 2, 468, 466, 3, 2, 2, 2, 468, 469, 3, 2, 2, 2, 469, 470, 3, 2, 2, 2,
	470, 471, 8, 59, 13, 2, 471, 472, 3, 2, 2, 2, 472, 473, 8, 59, 12, 2, 473,
	122, 3, 2, 2, 2, 474, 476, 10, 8, 2, 2, 475, 474, 3, 2, 2, 2, 476, 477,
	3, 2, 2, 2, 477, 475, 3, 2, 2, 2, 477, 478, 3, 2, 2, 2, 478, 479, 3, 2,
	2, 2, 479, 480, 8, 60, 14, 2, 480, 124, 3, 2, 2, 2, 481, 482, 9, 17, 2,
	2, 482, 483, 3, 2, 2, 2, 483, 484, 8, 61, 15, 2, 484, 126, 3, 2, 2, 2,
	485, 487, 10, 17, 2, 2, 486, 488, 10, 18, 2, 2, 487, 486, 3, 2, 2, 2, 488,
	489, 3, 2, 2, 2, 489, 487, 3, 2, 2, 2, 489, 490, 3, 2, 2, 2, 490, 491,
	3, 2, 2, 2, 491, 492, 8, 62, 14, 2, 492, 128, 3, 2, 2, 2, 493, 494, 9,
	17, 2, 2, 494, 495, 3, 2, 2, 2, 495, 496, 8, 63, 15, 2, 496, 497, 8, 63,
	14, 2, 497, 130, 3, 2, 2, 2, 498, 502, 9, 15, 2, 2, 499, 501, 9, 16, 2,
	2, 500, 499, 3, 2, 2, 2, 501, 504, 3, 2, 2, 2, 502, 500, 3, 2, 2, 2, 502,
	503, 3, 2, 2, 2, 503, 132, 3, 2, 2, 2, 504, 502, 3, 2, 2, 2, 505, 506,
	9, 17, 2, 2, 506, 507, 3, 2, 2, 2, 507, 508, 8, 65, 15, 2, 508, 134, 3,
	2, 2, 2, 509, 511, 10, 17, 2, 2, 510, 512, 10, 19, 2, 2, 511, 510, 3, 2,
	2, 2, 512, 513, 3, 2, 2, 2, 513, 511, 3, 2, 2, 2, 513, 514, 3, 2, 2, 2,
	514, 515, 3, 2, 2, 2, 515, 516, 8, 66, 14, 2, 516, 136, 3, 2, 2, 2, 28,
	2, 3, 4, 5, 6, 169, 192, 234, 251, 259, 271, 385, 393, 399, 408, 414, 419,
	429, 446, 453, 462, 468, 477, 489, 502, 513, 16, 7, 3, 2, 7, 4, 2, 7, 6,
	2, 7, 5, 2, 3, 36, 2, 3, 37, 3, 3, 48, 4, 3, 49, 5, 3, 53, 6, 3, 54, 7,
	2, 3, 2, 3, 59, 8, 6, 2, 2, 8, 2, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE", "NOT_NEWLINE", "FREE_TEXT_NAME", "AT_VAR_DECL", "EVENT_NAME_MODE",
}

var lexerLiteralNames = []string{
	"", "", "", "", "", "'!wrap'", "'!table'", "'!type'", "'import'", "", "",
	"", "", "", "'...'", "'set of'", "", "'<->'", "'::'", "'<:'", "'<-'", "'.. * <- *'",
	"'+'", "'~'", "','", "'='", "'$'", "'/'", "'-'", "'*'", "':'", "'%'", "'.'",
	"'!'", "'?'", "'@'", "'&'", "'['", "']'", "'{'", "'}'", "'('", "')'", "'<'",
	"'>'", "'#'", "'|'",
}

var lexerSymbolicNames = []string{
	"", "INDENT", "DEDENT", "NativeDataTypes", "HTTP_VERBS", "WRAP", "TABLE",
	"TYPE", "IMPORT", "RETURN", "IF", "ELSE", "FOR", "LOOP", "WHATEVER", "SET_OF",
	"ONE_OF", "DISTANCE", "NAME_SEP", "LESS_COLON", "MEMBER", "COLLECTOR",
	"PLUS", "TILDE", "COMMA", "EQ", "DOLLAR", "FORWARD_SLASH", "MINUS", "STAR",
	"COLON", "PERCENT", "DOT", "EXCLAIM", "QN", "AT", "AMP", "SQ_OPEN", "SQ_CLOSE",
	"CURLY_OPEN", "CURLY_CLOSE", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_ANGLE",
	"CLOSE_ANGLE", "HASH", "PIPE", "DBL_QT", "SINGLE_QT", "EMPTY_LINE", "INDENTED_COMMENT",
	"DIGITS", "QSTRING", "NEWLINE", "SYSL_COMMENT", "TEXT_LINE", "Name", "WS",
	"TEXT", "SKIP_WS", "TEXT_NAME", "POP_WS", "VAR_NAME", "SKIP_WS_2", "EVENT_NAME",
}

var lexerRuleNames = []string{
	"NativeDataTypes", "HTTP_VERBS", "WRAP", "TABLE", "TYPE", "IMPORT", "RETURN",
	"IF", "ELSE", "FOR", "LOOP", "WHATEVER", "SET_OF", "ONE_OF", "DISTANCE",
	"NAME_SEP", "LESS_COLON", "MEMBER", "COLLECTOR", "PLUS", "TILDE", "COMMA",
	"EQ", "DOLLAR", "FORWARD_SLASH", "MINUS", "STAR", "COLON", "PERCENT", "DOT",
	"EXCLAIM", "QN", "AT", "AMP", "SQ_OPEN", "SQ_CLOSE", "CURLY_OPEN", "CURLY_CLOSE",
	"OPEN_PAREN", "CLOSE_PAREN", "OPEN_ANGLE", "CLOSE_ANGLE", "HASH", "PIPE",
	"DBL_QT", "SINGLE_QT", "EMPTY_LINE", "INDENTED_COMMENT", "DIGITS", "WITHIN_DBL_QTS",
	"WITHIN_SNGL_QTS", "QSTRING", "NEWLINE", "SYSL_COMMENT", "PRINTABLE", "TEXT_LINE",
	"Name", "WS", "TEXT", "SKIP_WS", "TEXT_NAME", "POP_WS", "VAR_NAME", "SKIP_WS_2",
	"EVENT_NAME",
}

type SyslLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewSyslLexer(input antlr.CharStream) *SyslLexer {

	l := new(SyslLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "SyslLexer.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// SyslLexer tokens.
const (
	SyslLexerINDENT           = 1
	SyslLexerDEDENT           = 2
	SyslLexerNativeDataTypes  = 3
	SyslLexerHTTP_VERBS       = 4
	SyslLexerWRAP             = 5
	SyslLexerTABLE            = 6
	SyslLexerTYPE             = 7
	SyslLexerIMPORT           = 8
	SyslLexerRETURN           = 9
	SyslLexerIF               = 10
	SyslLexerELSE             = 11
	SyslLexerFOR              = 12
	SyslLexerLOOP             = 13
	SyslLexerWHATEVER         = 14
	SyslLexerSET_OF           = 15
	SyslLexerONE_OF           = 16
	SyslLexerDISTANCE         = 17
	SyslLexerNAME_SEP         = 18
	SyslLexerLESS_COLON       = 19
	SyslLexerMEMBER           = 20
	SyslLexerCOLLECTOR        = 21
	SyslLexerPLUS             = 22
	SyslLexerTILDE            = 23
	SyslLexerCOMMA            = 24
	SyslLexerEQ               = 25
	SyslLexerDOLLAR           = 26
	SyslLexerFORWARD_SLASH    = 27
	SyslLexerMINUS            = 28
	SyslLexerSTAR             = 29
	SyslLexerCOLON            = 30
	SyslLexerPERCENT          = 31
	SyslLexerDOT              = 32
	SyslLexerEXCLAIM          = 33
	SyslLexerQN               = 34
	SyslLexerAT               = 35
	SyslLexerAMP              = 36
	SyslLexerSQ_OPEN          = 37
	SyslLexerSQ_CLOSE         = 38
	SyslLexerCURLY_OPEN       = 39
	SyslLexerCURLY_CLOSE      = 40
	SyslLexerOPEN_PAREN       = 41
	SyslLexerCLOSE_PAREN      = 42
	SyslLexerOPEN_ANGLE       = 43
	SyslLexerCLOSE_ANGLE      = 44
	SyslLexerHASH             = 45
	SyslLexerPIPE             = 46
	SyslLexerDBL_QT           = 47
	SyslLexerSINGLE_QT        = 48
	SyslLexerEMPTY_LINE       = 49
	SyslLexerINDENTED_COMMENT = 50
	SyslLexerDIGITS           = 51
	SyslLexerQSTRING          = 52
	SyslLexerNEWLINE          = 53
	SyslLexerSYSL_COMMENT     = 54
	SyslLexerTEXT_LINE        = 55
	SyslLexerName             = 56
	SyslLexerWS               = 57
	SyslLexerTEXT             = 58
	SyslLexerSKIP_WS          = 59
	SyslLexerTEXT_NAME        = 60
	SyslLexerPOP_WS           = 61
	SyslLexerVAR_NAME         = 62
	SyslLexerSKIP_WS_2        = 63
	SyslLexerEVENT_NAME       = 64
)

// SyslLexer modes.
const (
	SyslLexerNOT_NEWLINE = iota + 1
	SyslLexerFREE_TEXT_NAME
	SyslLexerAT_VAR_DECL
	SyslLexerEVENT_NAME_MODE
)

var spaces int
var linenum int
var in_sq_brackets int

var gotNewLine bool
var prevTokenIndex = -1

func (l *SyslLexer) NextToken() antlr.Token {
	return GetNextToken(l)
}

func (l *SyslLexer) Action(localctx antlr.RuleContext, ruleIndex, actionIndex int) {
	switch ruleIndex {
	case 34:
		l.SQ_OPEN_Action(localctx, actionIndex)

	case 35:
		l.SQ_CLOSE_Action(localctx, actionIndex)

	case 46:
		l.EMPTY_LINE_Action(localctx, actionIndex)

	case 47:
		l.INDENTED_COMMENT_Action(localctx, actionIndex)

	case 51:
		l.QSTRING_Action(localctx, actionIndex)

	case 52:
		l.NEWLINE_Action(localctx, actionIndex)

	case 57:
		l.WS_Action(localctx, actionIndex)

	default:
		panic("No registered action for: " + fmt.Sprint(ruleIndex))
	}
}

func (l *SyslLexer) SQ_OPEN_Action(localctx antlr.RuleContext, actionIndex int) {
	switch actionIndex {
	case 0:
		in_sq_brackets++

	default:
		panic("No registered action for: " + fmt.Sprint(actionIndex))
	}
}
func (l *SyslLexer) SQ_CLOSE_Action(localctx antlr.RuleContext, actionIndex int) {
	switch actionIndex {
	case 1:
		in_sq_brackets--

	default:
		panic("No registered action for: " + fmt.Sprint(actionIndex))
	}
}
func (l *SyslLexer) EMPTY_LINE_Action(localctx antlr.RuleContext, actionIndex int) {
	switch actionIndex {
	case 2:
		l.Skip()
		spaces = 0
		linenum++

	default:
		panic("No registered action for: " + fmt.Sprint(actionIndex))
	}
}
func (l *SyslLexer) INDENTED_COMMENT_Action(localctx antlr.RuleContext, actionIndex int) {
	switch actionIndex {
	case 3:
		l.Skip()
		spaces = 0
		linenum++

	default:
		panic("No registered action for: " + fmt.Sprint(actionIndex))
	}
}
func (l *SyslLexer) QSTRING_Action(localctx antlr.RuleContext, actionIndex int) {
	switch actionIndex {
	case 4:

		l.SetText(strings.Replace(l.GetText(), "\\n", "\n", -1))

	default:
		panic("No registered action for: " + fmt.Sprint(actionIndex))
	}
}
func (l *SyslLexer) NEWLINE_Action(localctx antlr.RuleContext, actionIndex int) {
	switch actionIndex {
	case 5:
		gotNewLine = true
		spaces = 0
		linenum++

	default:
		panic("No registered action for: " + fmt.Sprint(actionIndex))
	}
}
func (l *SyslLexer) WS_Action(localctx antlr.RuleContext, actionIndex int) {
	switch actionIndex {
	case 6:
		spaces = calcSpaces(l.GetText())

	default:
		panic("No registered action for: " + fmt.Sprint(actionIndex))
	}
}

func (l *SyslLexer) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 55:
		return l.TEXT_LINE_Sempred(localctx, predIndex)

	default:
		panic("No registered predicate for: " + fmt.Sprint(ruleIndex))
	}
}

func (p *SyslLexer) TEXT_LINE_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return in_sq_brackets == 0

	case 1:
		return startsWithKeyword(p.GetText()) == false

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
