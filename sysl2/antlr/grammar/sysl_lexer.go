// Generated from SyslLexer.g4 by ANTLR 4.7.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

import "encoding/json"

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 66, 569,
	8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5,
	9, 5, 4, 6, 9, 6, 4, 7, 9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4,
	11, 9, 11, 4, 12, 9, 12, 4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16,
	9, 16, 4, 17, 9, 17, 4, 18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9,
	21, 4, 22, 9, 22, 4, 23, 9, 23, 4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26,
	4, 27, 9, 27, 4, 28, 9, 28, 4, 29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4,
	32, 9, 32, 4, 33, 9, 33, 4, 34, 9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37,
	9, 37, 4, 38, 9, 38, 4, 39, 9, 39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9,
	42, 4, 43, 9, 43, 4, 44, 9, 44, 4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47,
	4, 48, 9, 48, 4, 49, 9, 49, 4, 50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4,
	53, 9, 53, 4, 54, 9, 54, 4, 55, 9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58,
	9, 58, 4, 59, 9, 59, 4, 60, 9, 60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9,
	63, 4, 64, 9, 64, 4, 65, 9, 65, 4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68,
	3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
	3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
	3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 5, 2, 174, 10, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 3, 197, 10, 3, 3, 3,
	3, 3, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5,
	3, 5, 3, 5, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 7, 3, 7, 3, 7, 3, 7,
	3, 7, 3, 7, 3, 7, 3, 8, 6, 8, 228, 10, 8, 13, 8, 14, 8, 229, 3, 9, 3, 9,
	6, 9, 234, 10, 9, 13, 9, 14, 9, 235, 3, 9, 3, 9, 3, 9, 6, 9, 241, 10, 9,
	13, 9, 14, 9, 242, 5, 9, 245, 10, 9, 3, 9, 7, 9, 248, 10, 9, 12, 9, 14,
	9, 251, 11, 9, 3, 9, 3, 9, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3,
	10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 5, 10, 267, 10, 10, 3, 10, 3, 10,
	3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3,
	12, 3, 12, 3, 12, 5, 12, 284, 10, 12, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13,
	3, 13, 5, 13, 292, 10, 13, 3, 13, 3, 13, 3, 14, 3, 14, 3, 14, 3, 14, 3,
	14, 3, 14, 3, 14, 3, 14, 5, 14, 304, 10, 14, 3, 15, 3, 15, 3, 15, 3, 15,
	3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 17, 3, 17, 3, 17, 3,
	17, 3, 17, 3, 17, 3, 17, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 19,
	3, 19, 3, 19, 3, 19, 3, 19, 3, 20, 3, 20, 3, 20, 3, 21, 3, 21, 3, 21, 3,
	21, 3, 21, 3, 22, 3, 22, 3, 22, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23,
	3, 23, 3, 23, 3, 23, 3, 23, 3, 24, 3, 24, 3, 25, 3, 25, 3, 26, 3, 26, 3,
	27, 3, 27, 3, 28, 3, 28, 3, 29, 3, 29, 3, 30, 3, 30, 3, 31, 3, 31, 3, 32,
	3, 32, 3, 33, 3, 33, 3, 34, 3, 34, 3, 35, 3, 35, 3, 36, 3, 36, 3, 37, 3,
	37, 3, 37, 3, 37, 3, 38, 3, 38, 3, 39, 3, 39, 3, 39, 3, 40, 3, 40, 3, 40,
	3, 41, 3, 41, 3, 42, 3, 42, 3, 43, 3, 43, 3, 44, 3, 44, 3, 45, 3, 45, 5,
	45, 404, 10, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 46, 3, 46,
	3, 46, 3, 46, 3, 47, 3, 47, 3, 47, 3, 47, 3, 48, 3, 48, 3, 49, 3, 49, 3,
	50, 6, 50, 425, 10, 50, 13, 50, 14, 50, 426, 3, 50, 3, 50, 3, 50, 3, 51,
	6, 51, 433, 10, 51, 13, 51, 14, 51, 434, 3, 51, 3, 51, 6, 51, 439, 10,
	51, 13, 51, 14, 51, 440, 3, 51, 3, 51, 3, 51, 3, 52, 3, 52, 7, 52, 448,
	10, 52, 12, 52, 14, 52, 451, 11, 52, 3, 53, 7, 53, 454, 10, 53, 12, 53,
	14, 53, 457, 11, 53, 3, 54, 7, 54, 460, 10, 54, 12, 54, 14, 54, 463, 11,
	54, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 5, 55, 473,
	10, 55, 3, 55, 3, 55, 3, 56, 5, 56, 478, 10, 56, 3, 56, 3, 56, 3, 56, 3,
	56, 3, 56, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 58, 6, 58, 491, 10, 58,
	13, 58, 14, 58, 492, 3, 59, 3, 59, 3, 59, 6, 59, 498, 10, 59, 13, 59, 14,
	59, 499, 3, 59, 6, 59, 503, 10, 59, 13, 59, 14, 59, 504, 3, 59, 3, 59,
	3, 59, 3, 59, 3, 60, 3, 60, 7, 60, 513, 10, 60, 12, 60, 14, 60, 516, 11,
	60, 3, 61, 6, 61, 519, 10, 61, 13, 61, 14, 61, 520, 3, 61, 3, 61, 3, 61,
	3, 61, 3, 62, 6, 62, 528, 10, 62, 13, 62, 14, 62, 529, 3, 62, 3, 62, 3,
	63, 3, 63, 3, 63, 3, 63, 3, 64, 3, 64, 6, 64, 540, 10, 64, 13, 64, 14,
	64, 541, 3, 64, 3, 64, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 66, 3, 66,
	7, 66, 553, 10, 66, 12, 66, 14, 66, 556, 11, 66, 3, 67, 3, 67, 3, 67, 3,
	67, 3, 68, 3, 68, 6, 68, 564, 10, 68, 13, 68, 14, 68, 565, 3, 68, 3, 68,
	3, 440, 2, 69, 7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17, 2, 19, 2, 21, 10, 23,
	11, 25, 12, 27, 13, 29, 14, 31, 15, 33, 16, 35, 17, 37, 18, 39, 19, 41,
	20, 43, 21, 45, 22, 47, 23, 49, 24, 51, 25, 53, 26, 55, 27, 57, 28, 59,
	29, 61, 30, 63, 31, 65, 32, 67, 33, 69, 34, 71, 35, 73, 36, 75, 37, 77,
	38, 79, 39, 81, 40, 83, 41, 85, 42, 87, 43, 89, 44, 91, 45, 93, 46, 95,
	47, 97, 48, 99, 49, 101, 50, 103, 51, 105, 52, 107, 53, 109, 2, 111, 2,
	113, 54, 115, 55, 117, 56, 119, 2, 121, 57, 123, 58, 125, 59, 127, 60,
	129, 61, 131, 62, 133, 63, 135, 64, 137, 65, 139, 66, 7, 2, 3, 4, 5, 6,
	23, 8, 2, 11, 12, 15, 15, 34, 34, 49, 49, 60, 60, 94, 94, 4, 2, 11, 11,
	34, 34, 4, 2, 75, 75, 107, 107, 4, 2, 72, 72, 104, 104, 4, 2, 81, 81, 113,
	113, 3, 2, 36, 36, 3, 2, 41, 41, 4, 2, 12, 12, 15, 15, 3, 2, 12, 12, 3,
	2, 51, 59, 3, 2, 50, 59, 5, 2, 12, 12, 15, 15, 36, 36, 5, 2, 12, 12, 15,
	15, 41, 41, 14, 2, 12, 12, 15, 15, 34, 37, 40, 41, 47, 47, 49, 49, 60,
	60, 62, 63, 65, 66, 93, 93, 95, 95, 125, 127, 5, 2, 34, 34, 40, 40, 47,
	47, 4, 2, 67, 92, 99, 124, 7, 2, 47, 47, 50, 59, 67, 92, 97, 97, 99, 124,
	3, 2, 34, 34, 8, 2, 12, 12, 15, 15, 60, 60, 62, 62, 93, 93, 95, 95, 7,
	2, 47, 48, 50, 59, 67, 92, 97, 97, 99, 124, 7, 2, 12, 12, 15, 15, 60, 60,
	93, 93, 95, 95, 2, 595, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11, 3, 2,
	2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 23, 3,
	2, 2, 2, 2, 25, 3, 2, 2, 2, 2, 27, 3, 2, 2, 2, 2, 29, 3, 2, 2, 2, 2, 31,
	3, 2, 2, 2, 2, 33, 3, 2, 2, 2, 2, 35, 3, 2, 2, 2, 2, 37, 3, 2, 2, 2, 2,
	39, 3, 2, 2, 2, 2, 41, 3, 2, 2, 2, 2, 43, 3, 2, 2, 2, 2, 45, 3, 2, 2, 2,
	2, 47, 3, 2, 2, 2, 2, 49, 3, 2, 2, 2, 2, 51, 3, 2, 2, 2, 2, 53, 3, 2, 2,
	2, 2, 55, 3, 2, 2, 2, 2, 57, 3, 2, 2, 2, 2, 59, 3, 2, 2, 2, 2, 61, 3, 2,
	2, 2, 2, 63, 3, 2, 2, 2, 2, 65, 3, 2, 2, 2, 2, 67, 3, 2, 2, 2, 2, 69, 3,
	2, 2, 2, 2, 71, 3, 2, 2, 2, 2, 73, 3, 2, 2, 2, 2, 75, 3, 2, 2, 2, 2, 77,
	3, 2, 2, 2, 2, 79, 3, 2, 2, 2, 2, 81, 3, 2, 2, 2, 2, 83, 3, 2, 2, 2, 2,
	85, 3, 2, 2, 2, 2, 87, 3, 2, 2, 2, 2, 89, 3, 2, 2, 2, 2, 91, 3, 2, 2, 2,
	2, 93, 3, 2, 2, 2, 2, 95, 3, 2, 2, 2, 2, 97, 3, 2, 2, 2, 2, 99, 3, 2, 2,
	2, 2, 101, 3, 2, 2, 2, 2, 103, 3, 2, 2, 2, 2, 105, 3, 2, 2, 2, 2, 107,
	3, 2, 2, 2, 2, 113, 3, 2, 2, 2, 2, 115, 3, 2, 2, 2, 2, 117, 3, 2, 2, 2,
	2, 121, 3, 2, 2, 2, 2, 123, 3, 2, 2, 2, 2, 125, 3, 2, 2, 2, 3, 127, 3,
	2, 2, 2, 4, 129, 3, 2, 2, 2, 4, 131, 3, 2, 2, 2, 5, 133, 3, 2, 2, 2, 5,
	135, 3, 2, 2, 2, 6, 137, 3, 2, 2, 2, 6, 139, 3, 2, 2, 2, 7, 173, 3, 2,
	2, 2, 9, 196, 3, 2, 2, 2, 11, 200, 3, 2, 2, 2, 13, 206, 3, 2, 2, 2, 15,
	213, 3, 2, 2, 2, 17, 219, 3, 2, 2, 2, 19, 227, 3, 2, 2, 2, 21, 231, 3,
	2, 2, 2, 23, 266, 3, 2, 2, 2, 25, 270, 3, 2, 2, 2, 27, 283, 3, 2, 2, 2,
	29, 291, 3, 2, 2, 2, 31, 303, 3, 2, 2, 2, 33, 305, 3, 2, 2, 2, 35, 309,
	3, 2, 2, 2, 37, 316, 3, 2, 2, 2, 39, 323, 3, 2, 2, 2, 41, 329, 3, 2, 2,
	2, 43, 334, 3, 2, 2, 2, 45, 337, 3, 2, 2, 2, 47, 342, 3, 2, 2, 2, 49, 345,
	3, 2, 2, 2, 51, 355, 3, 2, 2, 2, 53, 357, 3, 2, 2, 2, 55, 359, 3, 2, 2,
	2, 57, 361, 3, 2, 2, 2, 59, 363, 3, 2, 2, 2, 61, 365, 3, 2, 2, 2, 63, 367,
	3, 2, 2, 2, 65, 369, 3, 2, 2, 2, 67, 371, 3, 2, 2, 2, 69, 373, 3, 2, 2,
	2, 71, 375, 3, 2, 2, 2, 73, 377, 3, 2, 2, 2, 75, 379, 3, 2, 2, 2, 77, 381,
	3, 2, 2, 2, 79, 385, 3, 2, 2, 2, 81, 387, 3, 2, 2, 2, 83, 390, 3, 2, 2,
	2, 85, 393, 3, 2, 2, 2, 87, 395, 3, 2, 2, 2, 89, 397, 3, 2, 2, 2, 91, 399,
	3, 2, 2, 2, 93, 401, 3, 2, 2, 2, 95, 411, 3, 2, 2, 2, 97, 415, 3, 2, 2,
	2, 99, 419, 3, 2, 2, 2, 101, 421, 3, 2, 2, 2, 103, 424, 3, 2, 2, 2, 105,
	432, 3, 2, 2, 2, 107, 445, 3, 2, 2, 2, 109, 455, 3, 2, 2, 2, 111, 461,
	3, 2, 2, 2, 113, 472, 3, 2, 2, 2, 115, 477, 3, 2, 2, 2, 117, 484, 3, 2,
	2, 2, 119, 490, 3, 2, 2, 2, 121, 494, 3, 2, 2, 2, 123, 510, 3, 2, 2, 2,
	125, 518, 3, 2, 2, 2, 127, 527, 3, 2, 2, 2, 129, 533, 3, 2, 2, 2, 131,
	537, 3, 2, 2, 2, 133, 545, 3, 2, 2, 2, 135, 550, 3, 2, 2, 2, 137, 557,
	3, 2, 2, 2, 139, 561, 3, 2, 2, 2, 141, 142, 7, 107, 2, 2, 142, 143, 7,
	112, 2, 2, 143, 174, 7, 118, 2, 2, 144, 145, 7, 117, 2, 2, 145, 146, 7,
	118, 2, 2, 146, 147, 7, 116, 2, 2, 147, 148, 7, 107, 2, 2, 148, 149, 7,
	112, 2, 2, 149, 174, 7, 105, 2, 2, 150, 151, 7, 102, 2, 2, 151, 152, 7,
	99, 2, 2, 152, 153, 7, 118, 2, 2, 153, 174, 7, 103, 2, 2, 154, 155, 7,
	100, 2, 2, 155, 156, 7, 113, 2, 2, 156, 157, 7, 113, 2, 2, 157, 174, 7,
	110, 2, 2, 158, 159, 7, 102, 2, 2, 159, 160, 7, 103, 2, 2, 160, 161, 7,
	101, 2, 2, 161, 162, 7, 107, 2, 2, 162, 163, 7, 111, 2, 2, 163, 164, 7,
	99, 2, 2, 164, 174, 7, 110, 2, 2, 165, 166, 7, 102, 2, 2, 166, 167, 7,
	99, 2, 2, 167, 168, 7, 118, 2, 2, 168, 169, 7, 103, 2, 2, 169, 170, 7,
	118, 2, 2, 170, 171, 7, 107, 2, 2, 171, 172, 7, 111, 2, 2, 172, 174, 7,
	103, 2, 2, 173, 141, 3, 2, 2, 2, 173, 144, 3, 2, 2, 2, 173, 150, 3, 2,
	2, 2, 173, 154, 3, 2, 2, 2, 173, 158, 3, 2, 2, 2, 173, 165, 3, 2, 2, 2,
	174, 8, 3, 2, 2, 2, 175, 176, 7, 73, 2, 2, 176, 177, 7, 71, 2, 2, 177,
	197, 7, 86, 2, 2, 178, 179, 7, 82, 2, 2, 179, 180, 7, 81, 2, 2, 180, 181,
	7, 85, 2, 2, 181, 197, 7, 86, 2, 2, 182, 183, 7, 70, 2, 2, 183, 184, 7,
	71, 2, 2, 184, 185, 7, 78, 2, 2, 185, 186, 7, 71, 2, 2, 186, 187, 7, 86,
	2, 2, 187, 197, 7, 71, 2, 2, 188, 189, 7, 82, 2, 2, 189, 190, 7, 87, 2,
	2, 190, 197, 7, 86, 2, 2, 191, 192, 7, 82, 2, 2, 192, 193, 7, 67, 2, 2,
	193, 194, 7, 86, 2, 2, 194, 195, 7, 69, 2, 2, 195, 197, 7, 74, 2, 2, 196,
	175, 3, 2, 2, 2, 196, 178, 3, 2, 2, 2, 196, 182, 3, 2, 2, 2, 196, 188,
	3, 2, 2, 2, 196, 191, 3, 2, 2, 2, 197, 198, 3, 2, 2, 2, 198, 199, 8, 3,
	2, 2, 199, 10, 3, 2, 2, 2, 200, 201, 7, 35, 2, 2, 201, 202, 7, 121, 2,
	2, 202, 203, 7, 116, 2, 2, 203, 204, 7, 99, 2, 2, 204, 205, 7, 114, 2,
	2, 205, 12, 3, 2, 2, 2, 206, 207, 7, 35, 2, 2, 207, 208, 7, 118, 2, 2,
	208, 209, 7, 99, 2, 2, 209, 210, 7, 100, 2, 2, 210, 211, 7, 110, 2, 2,
	211, 212, 7, 103, 2, 2, 212, 14, 3, 2, 2, 2, 213, 214, 7, 35, 2, 2, 214,
	215, 7, 118, 2, 2, 215, 216, 7, 123, 2, 2, 216, 217, 7, 114, 2, 2, 217,
	218, 7, 103, 2, 2, 218, 16, 3, 2, 2, 2, 219, 220, 7, 107, 2, 2, 220, 221,
	7, 111, 2, 2, 221, 222, 7, 114, 2, 2, 222, 223, 7, 113, 2, 2, 223, 224,
	7, 116, 2, 2, 224, 225, 7, 118, 2, 2, 225, 18, 3, 2, 2, 2, 226, 228, 10,
	2, 2, 2, 227, 226, 3, 2, 2, 2, 228, 229, 3, 2, 2, 2, 229, 227, 3, 2, 2,
	2, 229, 230, 3, 2, 2, 2, 230, 20, 3, 2, 2, 2, 231, 233, 5, 17, 7, 2, 232,
	234, 7, 34, 2, 2, 233, 232, 3, 2, 2, 2, 234, 235, 3, 2, 2, 2, 235, 233,
	3, 2, 2, 2, 235, 236, 3, 2, 2, 2, 236, 244, 3, 2, 2, 2, 237, 245, 5, 19,
	8, 2, 238, 239, 7, 49, 2, 2, 239, 241, 5, 19, 8, 2, 240, 238, 3, 2, 2,
	2, 241, 242, 3, 2, 2, 2, 242, 240, 3, 2, 2, 2, 242, 243, 3, 2, 2, 2, 243,
	245, 3, 2, 2, 2, 244, 237, 3, 2, 2, 2, 244, 240, 3, 2, 2, 2, 245, 249,
	3, 2, 2, 2, 246, 248, 9, 3, 2, 2, 247, 246, 3, 2, 2, 2, 248, 251, 3, 2,
	2, 2, 249, 247, 3, 2, 2, 2, 249, 250, 3, 2, 2, 2, 250, 252, 3, 2, 2, 2,
	251, 249, 3, 2, 2, 2, 252, 253, 5, 115, 56, 2, 253, 22, 3, 2, 2, 2, 254,
	255, 7, 116, 2, 2, 255, 256, 7, 103, 2, 2, 256, 257, 7, 118, 2, 2, 257,
	258, 7, 119, 2, 2, 258, 259, 7, 116, 2, 2, 259, 267, 7, 112, 2, 2, 260,
	261, 7, 84, 2, 2, 261, 262, 7, 71, 2, 2, 262, 263, 7, 86, 2, 2, 263, 264,
	7, 87, 2, 2, 264, 265, 7, 84, 2, 2, 265, 267, 7, 80, 2, 2, 266, 254, 3,
	2, 2, 2, 266, 260, 3, 2, 2, 2, 267, 268, 3, 2, 2, 2, 268, 269, 8, 10, 3,
	2, 269, 24, 3, 2, 2, 2, 270, 271, 9, 4, 2, 2, 271, 272, 9, 5, 2, 2, 272,
	273, 3, 2, 2, 2, 273, 274, 8, 11, 4, 2, 274, 26, 3, 2, 2, 2, 275, 276,
	7, 103, 2, 2, 276, 277, 7, 110, 2, 2, 277, 278, 7, 117, 2, 2, 278, 284,
	7, 103, 2, 2, 279, 280, 7, 71, 2, 2, 280, 281, 7, 110, 2, 2, 281, 282,
	7, 117, 2, 2, 282, 284, 7, 103, 2, 2, 283, 275, 3, 2, 2, 2, 283, 279, 3,
	2, 2, 2, 284, 28, 3, 2, 2, 2, 285, 286, 7, 72, 2, 2, 286, 287, 7, 113,
	2, 2, 287, 292, 7, 116, 2, 2, 288, 289, 7, 104, 2, 2, 289, 290, 7, 113,
	2, 2, 290, 292, 7, 116, 2, 2, 291, 285, 3, 2, 2, 2, 291, 288, 3, 2, 2,
	2, 292, 293, 3, 2, 2, 2, 293, 294, 8, 13, 4, 2, 294, 30, 3, 2, 2, 2, 295,
	296, 7, 78, 2, 2, 296, 297, 7, 113, 2, 2, 297, 298, 7, 113, 2, 2, 298,
	304, 7, 114, 2, 2, 299, 300, 7, 110, 2, 2, 300, 301, 7, 113, 2, 2, 301,
	302, 7, 113, 2, 2, 302, 304, 7, 114, 2, 2, 303, 295, 3, 2, 2, 2, 303, 299,
	3, 2, 2, 2, 304, 32, 3, 2, 2, 2, 305, 306, 7, 48, 2, 2, 306, 307, 7, 48,
	2, 2, 307, 308, 7, 48, 2, 2, 308, 34, 3, 2, 2, 2, 309, 310, 7, 117, 2,
	2, 310, 311, 7, 103, 2, 2, 311, 312, 7, 118, 2, 2, 312, 313, 7, 34, 2,
	2, 313, 314, 7, 113, 2, 2, 314, 315, 7, 104, 2, 2, 315, 36, 3, 2, 2, 2,
	316, 317, 9, 6, 2, 2, 317, 318, 7, 112, 2, 2, 318, 319, 7, 103, 2, 2, 319,
	320, 7, 34, 2, 2, 320, 321, 7, 113, 2, 2, 321, 322, 7, 104, 2, 2, 322,
	38, 3, 2, 2, 2, 323, 324, 7, 62, 2, 2, 324, 325, 7, 47, 2, 2, 325, 326,
	7, 64, 2, 2, 326, 327, 3, 2, 2, 2, 327, 328, 8, 18, 5, 2, 328, 40, 3, 2,
	2, 2, 329, 330, 7, 60, 2, 2, 330, 331, 7, 60, 2, 2, 331, 332, 3, 2, 2,
	2, 332, 333, 8, 19, 4, 2, 333, 42, 3, 2, 2, 2, 334, 335, 7, 62, 2, 2, 335,
	336, 7, 60, 2, 2, 336, 44, 3, 2, 2, 2, 337, 338, 7, 62, 2, 2, 338, 339,
	7, 47, 2, 2, 339, 340, 3, 2, 2, 2, 340, 341, 8, 21, 4, 2, 341, 46, 3, 2,
	2, 2, 342, 343, 7, 47, 2, 2, 343, 344, 7, 64, 2, 2, 344, 48, 3, 2, 2, 2,
	345, 346, 7, 48, 2, 2, 346, 347, 7, 48, 2, 2, 347, 348, 7, 34, 2, 2, 348,
	349, 7, 44, 2, 2, 349, 350, 7, 34, 2, 2, 350, 351, 7, 62, 2, 2, 351, 352,
	7, 47, 2, 2, 352, 353, 7, 34, 2, 2, 353, 354, 7, 44, 2, 2, 354, 50, 3,
	2, 2, 2, 355, 356, 7, 45, 2, 2, 356, 52, 3, 2, 2, 2, 357, 358, 7, 128,
	2, 2, 358, 54, 3, 2, 2, 2, 359, 360, 7, 46, 2, 2, 360, 56, 3, 2, 2, 2,
	361, 362, 7, 63, 2, 2, 362, 58, 3, 2, 2, 2, 363, 364, 7, 38, 2, 2, 364,
	60, 3, 2, 2, 2, 365, 366, 7, 49, 2, 2, 366, 62, 3, 2, 2, 2, 367, 368, 7,
	47, 2, 2, 368, 64, 3, 2, 2, 2, 369, 370, 7, 44, 2, 2, 370, 66, 3, 2, 2,
	2, 371, 372, 7, 60, 2, 2, 372, 68, 3, 2, 2, 2, 373, 374, 7, 39, 2, 2, 374,
	70, 3, 2, 2, 2, 375, 376, 7, 48, 2, 2, 376, 72, 3, 2, 2, 2, 377, 378, 7,
	35, 2, 2, 378, 74, 3, 2, 2, 2, 379, 380, 7, 65, 2, 2, 380, 76, 3, 2, 2,
	2, 381, 382, 7, 66, 2, 2, 382, 383, 3, 2, 2, 2, 383, 384, 8, 37, 6, 2,
	384, 78, 3, 2, 2, 2, 385, 386, 7, 40, 2, 2, 386, 80, 3, 2, 2, 2, 387, 388,
	7, 93, 2, 2, 388, 389, 8, 39, 7, 2, 389, 82, 3, 2, 2, 2, 390, 391, 7, 95,
	2, 2, 391, 392, 8, 40, 8, 2, 392, 84, 3, 2, 2, 2, 393, 394, 7, 125, 2,
	2, 394, 86, 3, 2, 2, 2, 395, 396, 7, 127, 2, 2, 396, 88, 3, 2, 2, 2, 397,
	398, 7, 42, 2, 2, 398, 90, 3, 2, 2, 2, 399, 400, 7, 43, 2, 2, 400, 92,
	3, 2, 2, 2, 401, 403, 7, 37, 2, 2, 402, 404, 7, 15, 2, 2, 403, 402, 3,
	2, 2, 2, 403, 404, 3, 2, 2, 2, 404, 405, 3, 2, 2, 2, 405, 406, 7, 12, 2,
	2, 406, 407, 3, 2, 2, 2, 407, 408, 8, 45, 9, 2, 408, 409, 3, 2, 2, 2, 409,
	410, 8, 45, 10, 2, 410, 94, 3, 2, 2, 2, 411, 412, 7, 37, 2, 2, 412, 413,
	3, 2, 2, 2, 413, 414, 8, 46, 3, 2, 414, 96, 3, 2, 2, 2, 415, 416, 7, 126,
	2, 2, 416, 417, 3, 2, 2, 2, 417, 418, 8, 47, 3, 2, 418, 98, 3, 2, 2, 2,
	419, 420, 9, 7, 2, 2, 420, 100, 3, 2, 2, 2, 421, 422, 9, 8, 2, 2, 422,
	102, 3, 2, 2, 2, 423, 425, 9, 3, 2, 2, 424, 423, 3, 2, 2, 2, 425, 426,
	3, 2, 2, 2, 426, 424, 3, 2, 2, 2, 426, 427, 3, 2, 2, 2, 427, 428, 3, 2,
	2, 2, 428, 429, 9, 9, 2, 2, 429, 430, 8, 50, 11, 2, 430, 104, 3, 2, 2,
	2, 431, 433, 9, 3, 2, 2, 432, 431, 3, 2, 2, 2, 433, 434, 3, 2, 2, 2, 434,
	432, 3, 2, 2, 2, 434, 435, 3, 2, 2, 2, 435, 436, 3, 2, 2, 2, 436, 438,
	7, 37, 2, 2, 437, 439, 10, 10, 2, 2, 438, 437, 3, 2, 2, 2, 439, 440, 3,
	2, 2, 2, 440, 441, 3, 2, 2, 2, 440, 438, 3, 2, 2, 2, 441, 442, 3, 2, 2,
	2, 442, 443, 7, 12, 2, 2, 443, 444, 8, 51, 12, 2, 444, 106, 3, 2, 2, 2,
	445, 449, 9, 11, 2, 2, 446, 448, 9, 12, 2, 2, 447, 446, 3, 2, 2, 2, 448,
	451, 3, 2, 2, 2, 449, 447, 3, 2, 2, 2, 449, 450, 3, 2, 2, 2, 450, 108,
	3, 2, 2, 2, 451, 449, 3, 2, 2, 2, 452, 454, 10, 13, 2, 2, 453, 452, 3,
	2, 2, 2, 454, 457, 3, 2, 2, 2, 455, 453, 3, 2, 2, 2, 455, 456, 3, 2, 2,
	2, 456, 110, 3, 2, 2, 2, 457, 455, 3, 2, 2, 2, 458, 460, 10, 14, 2, 2,
	459, 458, 3, 2, 2, 2, 460, 463, 3, 2, 2, 2, 461, 459, 3, 2, 2, 2, 461,
	462, 3, 2, 2, 2, 462, 112, 3, 2, 2, 2, 463, 461, 3, 2, 2, 2, 464, 465,
	5, 99, 48, 2, 465, 466, 5, 109, 53, 2, 466, 467, 5, 99, 48, 2, 467, 473,
	3, 2, 2, 2, 468, 469, 5, 101, 49, 2, 469, 470, 5, 111, 54, 2, 470, 471,
	5, 101, 49, 2, 471, 473, 3, 2, 2, 2, 472, 464, 3, 2, 2, 2, 472, 468, 3,
	2, 2, 2, 473, 474, 3, 2, 2, 2, 474, 475, 8, 55, 13, 2, 475, 114, 3, 2,
	2, 2, 476, 478, 7, 15, 2, 2, 477, 476, 3, 2, 2, 2, 477, 478, 3, 2, 2, 2,
	478, 479, 3, 2, 2, 2, 479, 480, 7, 12, 2, 2, 480, 481, 8, 56, 14, 2, 481,
	482, 3, 2, 2, 2, 482, 483, 8, 56, 10, 2, 483, 116, 3, 2, 2, 2, 484, 485,
	5, 95, 46, 2, 485, 486, 5, 127, 62, 2, 486, 487, 3, 2, 2, 2, 487, 488,
	8, 57, 10, 2, 488, 118, 3, 2, 2, 2, 489, 491, 10, 15, 2, 2, 490, 489, 3,
	2, 2, 2, 491, 492, 3, 2, 2, 2, 492, 490, 3, 2, 2, 2, 492, 493, 3, 2, 2,
	2, 493, 120, 3, 2, 2, 2, 494, 495, 6, 59, 2, 2, 495, 502, 5, 119, 58, 2,
	496, 498, 9, 16, 2, 2, 497, 496, 3, 2, 2, 2, 498, 499, 3, 2, 2, 2, 499,
	497, 3, 2, 2, 2, 499, 500, 3, 2, 2, 2, 500, 501, 3, 2, 2, 2, 501, 503,
	5, 119, 58, 2, 502, 497, 3, 2, 2, 2, 503, 504, 3, 2, 2, 2, 504, 502, 3,
	2, 2, 2, 504, 505, 3, 2, 2, 2, 505, 506, 3, 2, 2, 2, 506, 507, 6, 59, 3,
	2, 507, 508, 6, 59, 4, 2, 508, 509, 6, 59, 5, 2, 509, 122, 3, 2, 2, 2,
	510, 514, 9, 17, 2, 2, 511, 513, 9, 18, 2, 2, 512, 511, 3, 2, 2, 2, 513,
	516, 3, 2, 2, 2, 514, 512, 3, 2, 2, 2, 514, 515, 3, 2, 2, 2, 515, 124,
	3, 2, 2, 2, 516, 514, 3, 2, 2, 2, 517, 519, 9, 3, 2, 2, 518, 517, 3, 2,
	2, 2, 519, 520, 3, 2, 2, 2, 520, 518, 3, 2, 2, 2, 520, 521, 3, 2, 2, 2,
	521, 522, 3, 2, 2, 2, 522, 523, 8, 61, 15, 2, 523, 524, 3, 2, 2, 2, 524,
	525, 8, 61, 10, 2, 525, 126, 3, 2, 2, 2, 526, 528, 10, 9, 2, 2, 527, 526,
	3, 2, 2, 2, 528, 529, 3, 2, 2, 2, 529, 527, 3, 2, 2, 2, 529, 530, 3, 2,
	2, 2, 530, 531, 3, 2, 2, 2, 531, 532, 8, 62, 16, 2, 532, 128, 3, 2, 2,
	2, 533, 534, 9, 19, 2, 2, 534, 535, 3, 2, 2, 2, 535, 536, 8, 63, 17, 2,
	536, 130, 3, 2, 2, 2, 537, 539, 10, 19, 2, 2, 538, 540, 10, 20, 2, 2, 539,
	538, 3, 2, 2, 2, 540, 541, 3, 2, 2, 2, 541, 539, 3, 2, 2, 2, 541, 542,
	3, 2, 2, 2, 542, 543, 3, 2, 2, 2, 543, 544, 8, 64, 16, 2, 544, 132, 3,
	2, 2, 2, 545, 546, 9, 19, 2, 2, 546, 547, 3, 2, 2, 2, 547, 548, 8, 65,
	17, 2, 548, 549, 8, 65, 16, 2, 549, 134, 3, 2, 2, 2, 550, 554, 9, 17, 2,
	2, 551, 553, 9, 21, 2, 2, 552, 551, 3, 2, 2, 2, 553, 556, 3, 2, 2, 2, 554,
	552, 3, 2, 2, 2, 554, 555, 3, 2, 2, 2, 555, 136, 3, 2, 2, 2, 556, 554,
	3, 2, 2, 2, 557, 558, 9, 19, 2, 2, 558, 559, 3, 2, 2, 2, 559, 560, 8, 67,
	17, 2, 560, 138, 3, 2, 2, 2, 561, 563, 10, 19, 2, 2, 562, 564, 10, 22,
	2, 2, 563, 562, 3, 2, 2, 2, 564, 565, 3, 2, 2, 2, 565, 563, 3, 2, 2, 2,
	565, 566, 3, 2, 2, 2, 566, 567, 3, 2, 2, 2, 567, 568, 8, 68, 16, 2, 568,
	140, 3, 2, 2, 2, 36, 2, 3, 4, 5, 6, 173, 196, 229, 235, 242, 244, 249,
	266, 283, 291, 303, 403, 426, 434, 440, 449, 455, 461, 472, 477, 492, 499,
	504, 514, 520, 529, 541, 554, 565, 18, 3, 3, 2, 7, 3, 2, 7, 4, 2, 7, 6,
	2, 7, 5, 2, 3, 39, 3, 3, 40, 4, 3, 45, 5, 2, 3, 2, 3, 50, 6, 3, 51, 7,
	3, 55, 8, 3, 56, 9, 3, 61, 10, 6, 2, 2, 8, 2, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE", "NOT_NEWLINE", "FREE_TEXT_NAME", "AT_VAR_DECL", "EVENT_NAME_MODE",
}

var lexerLiteralNames = []string{
	"", "", "", "", "", "'!wrap'", "'!table'", "'!type'", "", "", "", "", "",
	"", "'...'", "'set of'", "", "'<->'", "'::'", "'<:'", "'<-'", "'->'", "'.. * <- *'",
	"'+'", "'~'", "','", "'='", "'$'", "'/'", "'-'", "'*'", "':'", "'%'", "'.'",
	"'!'", "'?'", "'@'", "'&'", "'['", "']'", "'{'", "'}'", "'('", "')'", "",
	"'#'", "'|'",
}

var lexerSymbolicNames = []string{
	"", "INDENT", "DEDENT", "NativeDataTypes", "HTTP_VERBS", "WRAP", "TABLE",
	"TYPE", "IMPORT", "RETURN", "IF", "ELSE", "FOR", "LOOP", "WHATEVER", "SET_OF",
	"ONE_OF", "DISTANCE", "NAME_SEP", "LESS_COLON", "ARROW_LEFT", "ARROW_RIGHT",
	"COLLECTOR", "PLUS", "TILDE", "COMMA", "EQ", "DOLLAR", "FORWARD_SLASH",
	"MINUS", "STAR", "COLON", "PERCENT", "DOT", "EXCLAIM", "QN", "AT", "AMP",
	"SQ_OPEN", "SQ_CLOSE", "CURLY_OPEN", "CURLY_CLOSE", "OPEN_PAREN", "CLOSE_PAREN",
	"EMPTY_COMMENT", "HASH", "PIPE", "DBL_QT", "SINGLE_QT", "EMPTY_LINE", "INDENTED_COMMENT",
	"DIGITS", "QSTRING", "NEWLINE", "SYSL_COMMENT", "TEXT_LINE", "Name", "WS",
	"TEXT", "SKIP_WS", "TEXT_NAME", "POP_WS", "VAR_NAME", "SKIP_WS_2", "EVENT_NAME",
}

var lexerRuleNames = []string{
	"NativeDataTypes", "HTTP_VERBS", "WRAP", "TABLE", "TYPE", "IMPORT_KEY",
	"SUB_PATH_NAME", "IMPORT", "RETURN", "IF", "ELSE", "FOR", "LOOP", "WHATEVER",
	"SET_OF", "ONE_OF", "DISTANCE", "NAME_SEP", "LESS_COLON", "ARROW_LEFT",
	"ARROW_RIGHT", "COLLECTOR", "PLUS", "TILDE", "COMMA", "EQ", "DOLLAR", "FORWARD_SLASH",
	"MINUS", "STAR", "COLON", "PERCENT", "DOT", "EXCLAIM", "QN", "AT", "AMP",
	"SQ_OPEN", "SQ_CLOSE", "CURLY_OPEN", "CURLY_CLOSE", "OPEN_PAREN", "CLOSE_PAREN",
	"EMPTY_COMMENT", "HASH", "PIPE", "DBL_QT", "SINGLE_QT", "EMPTY_LINE", "INDENTED_COMMENT",
	"DIGITS", "WITHIN_DBL_QTS", "WITHIN_SNGL_QTS", "QSTRING", "NEWLINE", "SYSL_COMMENT",
	"PRINTABLE", "TEXT_LINE", "Name", "WS", "TEXT", "SKIP_WS", "TEXT_NAME",
	"POP_WS", "VAR_NAME", "SKIP_WS_2", "EVENT_NAME",
}

type SyslLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewSyslLexer(input antlr.CharStream) *SyslLexer {

	l := new(SyslLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "SyslLexer.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// SyslLexer tokens.
const (
	SyslLexerINDENT           = 1
	SyslLexerDEDENT           = 2
	SyslLexerNativeDataTypes  = 3
	SyslLexerHTTP_VERBS       = 4
	SyslLexerWRAP             = 5
	SyslLexerTABLE            = 6
	SyslLexerTYPE             = 7
	SyslLexerIMPORT           = 8
	SyslLexerRETURN           = 9
	SyslLexerIF               = 10
	SyslLexerELSE             = 11
	SyslLexerFOR              = 12
	SyslLexerLOOP             = 13
	SyslLexerWHATEVER         = 14
	SyslLexerSET_OF           = 15
	SyslLexerONE_OF           = 16
	SyslLexerDISTANCE         = 17
	SyslLexerNAME_SEP         = 18
	SyslLexerLESS_COLON       = 19
	SyslLexerARROW_LEFT       = 20
	SyslLexerARROW_RIGHT      = 21
	SyslLexerCOLLECTOR        = 22
	SyslLexerPLUS             = 23
	SyslLexerTILDE            = 24
	SyslLexerCOMMA            = 25
	SyslLexerEQ               = 26
	SyslLexerDOLLAR           = 27
	SyslLexerFORWARD_SLASH    = 28
	SyslLexerMINUS            = 29
	SyslLexerSTAR             = 30
	SyslLexerCOLON            = 31
	SyslLexerPERCENT          = 32
	SyslLexerDOT              = 33
	SyslLexerEXCLAIM          = 34
	SyslLexerQN               = 35
	SyslLexerAT               = 36
	SyslLexerAMP              = 37
	SyslLexerSQ_OPEN          = 38
	SyslLexerSQ_CLOSE         = 39
	SyslLexerCURLY_OPEN       = 40
	SyslLexerCURLY_CLOSE      = 41
	SyslLexerOPEN_PAREN       = 42
	SyslLexerCLOSE_PAREN      = 43
	SyslLexerEMPTY_COMMENT    = 44
	SyslLexerHASH             = 45
	SyslLexerPIPE             = 46
	SyslLexerDBL_QT           = 47
	SyslLexerSINGLE_QT        = 48
	SyslLexerEMPTY_LINE       = 49
	SyslLexerINDENTED_COMMENT = 50
	SyslLexerDIGITS           = 51
	SyslLexerQSTRING          = 52
	SyslLexerNEWLINE          = 53
	SyslLexerSYSL_COMMENT     = 54
	SyslLexerTEXT_LINE        = 55
	SyslLexerName             = 56
	SyslLexerWS               = 57
	SyslLexerTEXT             = 58
	SyslLexerSKIP_WS          = 59
	SyslLexerTEXT_NAME        = 60
	SyslLexerPOP_WS           = 61
	SyslLexerVAR_NAME         = 62
	SyslLexerSKIP_WS_2        = 63
	SyslLexerEVENT_NAME       = 64
)

// SyslLexer modes.
const (
	SyslLexerNOT_NEWLINE = iota + 1
	SyslLexerFREE_TEXT_NAME
	SyslLexerAT_VAR_DECL
	SyslLexerEVENT_NAME_MODE
)

var spaces int
var linenum int
var in_sq_brackets int

var gotNewLine bool
var gotHttpVerb bool

var prevTokenIndex = -1

func (l *SyslLexer) NextToken() antlr.Token {
	return GetNextToken(l)
}

func (l *SyslLexer) Action(localctx antlr.RuleContext, ruleIndex, actionIndex int) {
	switch ruleIndex {
	case 1:
		l.HTTP_VERBS_Action(localctx, actionIndex)

	case 37:
		l.SQ_OPEN_Action(localctx, actionIndex)

	case 38:
		l.SQ_CLOSE_Action(localctx, actionIndex)

	case 43:
		l.EMPTY_COMMENT_Action(localctx, actionIndex)

	case 48:
		l.EMPTY_LINE_Action(localctx, actionIndex)

	case 49:
		l.INDENTED_COMMENT_Action(localctx, actionIndex)

	case 53:
		l.QSTRING_Action(localctx, actionIndex)

	case 54:
		l.NEWLINE_Action(localctx, actionIndex)

	case 59:
		l.WS_Action(localctx, actionIndex)

	default:
		panic("No registered action for: " + fmt.Sprint(ruleIndex))
	}
}

func (l *SyslLexer) HTTP_VERBS_Action(localctx antlr.RuleContext, actionIndex int) {
	switch actionIndex {
	case 0:
		gotHttpVerb = true

	default:
		panic("No registered action for: " + fmt.Sprint(actionIndex))
	}
}
func (l *SyslLexer) SQ_OPEN_Action(localctx antlr.RuleContext, actionIndex int) {
	switch actionIndex {
	case 1:
		in_sq_brackets++

	default:
		panic("No registered action for: " + fmt.Sprint(actionIndex))
	}
}
func (l *SyslLexer) SQ_CLOSE_Action(localctx antlr.RuleContext, actionIndex int) {
	switch actionIndex {
	case 2:
		in_sq_brackets--

	default:
		panic("No registered action for: " + fmt.Sprint(actionIndex))
	}
}
func (l *SyslLexer) EMPTY_COMMENT_Action(localctx antlr.RuleContext, actionIndex int) {
	switch actionIndex {
	case 3:
		gotNewLine = true
		spaces = 0
		gotHttpVerb = false
		linenum++

	default:
		panic("No registered action for: " + fmt.Sprint(actionIndex))
	}
}
func (l *SyslLexer) EMPTY_LINE_Action(localctx antlr.RuleContext, actionIndex int) {
	switch actionIndex {
	case 4:
		l.Skip()
		spaces = 0
		linenum++

	default:
		panic("No registered action for: " + fmt.Sprint(actionIndex))
	}
}
func (l *SyslLexer) INDENTED_COMMENT_Action(localctx antlr.RuleContext, actionIndex int) {
	switch actionIndex {
	case 5:
		l.Skip()
		spaces = 0
		linenum++

	default:
		panic("No registered action for: " + fmt.Sprint(actionIndex))
	}
}
func (l *SyslLexer) QSTRING_Action(localctx antlr.RuleContext, actionIndex int) {
	switch actionIndex {
	case 6:

		var val string
		if json.Unmarshal([]byte(l.GetText()), &val) == nil {
			l.SetText(val)
		}

	default:
		panic("No registered action for: " + fmt.Sprint(actionIndex))
	}
}
func (l *SyslLexer) NEWLINE_Action(localctx antlr.RuleContext, actionIndex int) {
	switch actionIndex {
	case 7:
		gotNewLine = true
		gotHttpVerb = false
		spaces = 0
		linenum++

	default:
		panic("No registered action for: " + fmt.Sprint(actionIndex))
	}
}
func (l *SyslLexer) WS_Action(localctx antlr.RuleContext, actionIndex int) {
	switch actionIndex {
	case 8:
		spaces = calcSpaces(l.GetText())

	default:
		panic("No registered action for: " + fmt.Sprint(actionIndex))
	}
}

func (l *SyslLexer) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 57:
		return l.TEXT_LINE_Sempred(localctx, predIndex)

	default:
		panic("No registered predicate for: " + fmt.Sprint(ruleIndex))
	}
}

func (p *SyslLexer) TEXT_LINE_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return !gotHttpVerb

	case 1:
		return in_sq_brackets == 0

	case 2:
		return !gotHttpVerb

	case 3:
		return startsWithKeyword(p.GetText()) == false

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
